/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentski.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import studentski.controller.Obrada;
import studentski.model.Racun;
import studentski.model.Student;
import studentski.model.StudentskiDom;
import studentski.pomocno.HibernateUtil;

/**
 *
 * @author Ivan
 */
public class Racuni extends javax.swing.JFrame {
    
    private String odabraniMjesec;
    private Date pocetakMjeseca;
    private Date krajMjeseca;
    private SimpleDateFormat format;
    private Date pMjeseca;
    private Date kMjeseca;
    private List<Student> listaStudentaSNeplacenimRacunom;
    private List<Student> listaStudentaBezRacuna;
    private Obrada<Racun> obrada;
    private List<Student> listaStudentaSPlacenim;
    private StudentskiDom studentskiDom;
    private Date prijasnjiMjesecPocetak;
    private Date prijasnjiMjesecKraj;
    private Date pocetakPijasnjeg;
    private Date krajPrijasnjeg;
    
    
    /**
     * Creates new form Racuni
     */
    public Racuni() {
        initComponents();
        cmbStudentskiDom.addActionListener((ActionEvent e) -> {
        });
        cmbMjesec.addActionListener((ActionEvent e) -> {
        });
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        format = new SimpleDateFormat("yyyy-MM-dd");
        obrada = new Obrada<>();
        studentskiDom = new StudentskiDom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaS = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaBez = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbMjesec = new javax.swing.JComboBox<>();
        btnIzdajRacune = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        btnPojedinostNeplacenihiRacuna = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaPlacenih = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnUplataIzvrsena = new javax.swing.JButton();
        btnPojedinostiPlacenihRacuna = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmbStudentskiDom = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(listaS);

        jScrollPane2.setViewportView(listaBez);

        jLabel1.setText("Studenti s neplaćenim računom:");

        jLabel2.setText("Studenti bez računa:");

        cmbMjesec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sijecanj", "Veljaca", "Ozujak", "Travanj", "Svibanj", "Lipanj", "Srpanj", "Kolovoz", "Rujan", "Listopad", "Studeni", "Prosinac" }));
        cmbMjesec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMjesecActionPerformed(evt);
            }
        });

        btnIzdajRacune.setText("Izdaj račune");
        btnIzdajRacune.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzdajRacuneActionPerformed(evt);
            }
        });

        jLabel3.setText("Odaberi mjesec:");

        btnPojedinostNeplacenihiRacuna.setText("Pojedinosti računa");
        btnPojedinostNeplacenihiRacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostNeplacenihiRacunaActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listaPlacenih);

        jLabel4.setText("Studenti s plaćenim računom:");

        btnUplataIzvrsena.setText("Uplata izvršena");
        btnUplataIzvrsena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUplataIzvrsenaActionPerformed(evt);
            }
        });

        btnPojedinostiPlacenihRacuna.setText("Pojedinosti računa");
        btnPojedinostiPlacenihRacuna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostiPlacenihRacunaActionPerformed(evt);
            }
        });

        jLabel5.setText("Odaberi studentski dom:");

        cmbStudentskiDom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStudentskiDomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                        .addComponent(cmbMjesec, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnIzdajRacune, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnUplataIzvrsena, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnPojedinostNeplacenihiRacuna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btnPojedinostiPlacenihRacuna, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStudentskiDom, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(165, 165, 165))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(cmbMjesec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cmbStudentskiDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnIzdajRacune))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnPojedinostNeplacenihiRacuna)
                            .addComponent(btnPojedinostiPlacenihRacuna))))
                .addGap(18, 18, 18)
                .addComponent(btnUplataIzvrsena)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbMjesecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMjesecActionPerformed
        odabirDatuma(); 
        if(pMjeseca == null || kMjeseca == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali mjesec za pregled računa");
            return;
        }
        
    }//GEN-LAST:event_cmbMjesecActionPerformed

    private void btnIzdajRacuneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzdajRacuneActionPerformed
        Date trenutniDatum = new Date();
        if(pMjeseca == null || kMjeseca == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali mjesec za pregled računa");
            return;
        }
        if(listaStudentaBezRacuna.isEmpty()){
            JOptionPane.showMessageDialog(getRootPane(), "Svi studenti imaju izdan račun za " + odabraniMjesec);
            return;
        }
        boolean provjeraDatuma = isDateInBetweenIncludingEndPoints(pocetakMjeseca, krajMjeseca, trenutniDatum);
        if(!provjeraDatuma){
            JOptionPane.showMessageDialog(getRootPane(), "Odabrani mjesec nije trenutni mjesec "
                    + "te se za njega ne mogu izdati računi");
            return;
        }
        Racun r;
        for (Student student : listaStudentaBezRacuna) {
            r = new Racun();
            r.setDatumIzdavanjaRacuna(new Date());
            r.setPlacen(false);
            r.setStudent(student);
            obrada.save(r);
        }
        JOptionPane.showMessageDialog(getRootPane(), "Unjeli ste racune studentima za " + odabraniMjesec);
        popuniListeStudenata();
    }//GEN-LAST:event_btnIzdajRacuneActionPerformed

    private void btnPojedinostNeplacenihiRacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostNeplacenihiRacunaActionPerformed
        Student student = listaS.getSelectedValue();
        if (student == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali sudenta za pregled racuna");
            return;
        }
        if(listaStudentaSNeplacenimRacunom.isEmpty()){
            JOptionPane.showMessageDialog(getRootPane(), "Nema studenata s izdanim računom!");
            return;
        }
        if(pMjeseca == null || kMjeseca == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali mjesec za pregled računa");
            return;
        }
        Racun r = new Racun();
        List<Racun> listaRacuna = HibernateUtil.getSession().createQuery(
                "FROM Racun a WHERE a.obrisano=false and student like :uvjet and a.datumIzdavanjaRacuna BETWEEN :stDate AND :edDate ")
                .setString("uvjet", "%" + student.getSifra() + "%")
                .setParameter("stDate", pMjeseca)
                .setParameter("edDate", kMjeseca)
                .list();
        for (Racun racun : listaRacuna) {
            r = racun;
        }
        new PojedinostiRacuna(r).setVisible(true);
    }//GEN-LAST:event_btnPojedinostNeplacenihiRacunaActionPerformed

    private void btnUplataIzvrsenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUplataIzvrsenaActionPerformed
        Date trenutniDatum = new Date();
        Student student = listaS.getSelectedValue();
        boolean provjeraDatuma = isDateInBetweenIncludingEndPoints(pocetakMjeseca, krajMjeseca, trenutniDatum);
        if(!provjeraDatuma){
            JOptionPane.showMessageDialog(getRootPane(), "Odabrani mjesec nije trenutni mjesec "
                    + "te se za njega ne mogu izdati računi");
            return;
        }
        if(student == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali studenta koji je izvršio uplatu računa");
            return;
        }
        List<Racun> listaRacuna = HibernateUtil.getSession().createQuery(
                "FROM Racun a WHERE a.obrisano=false and student like :uvjet and a.datumIzdavanjaRacuna BETWEEN :stDate AND :edDate ")
                .setString("uvjet", "%" + student.getSifra() + "%")
                .setParameter("stDate", pMjeseca)
                .setParameter("edDate", kMjeseca)
                .list();
        for (Racun racun : listaRacuna) {
            racun.setPlacen(true);
            racun.setDatumUplateRacuna(new Date());
            racun.setCijena(500);
            obrada.save(racun);
        }
        JOptionPane.showMessageDialog(getRootPane(), "Student " + student + " platio je račun za " + odabraniMjesec);
        DefaultListModel<Student> model = new DefaultListModel<>();
        model.addElement(student);
        popuniListeStudenata();
    }//GEN-LAST:event_btnUplataIzvrsenaActionPerformed

    private void btnPojedinostiPlacenihRacunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostiPlacenihRacunaActionPerformed
        Student student = listaPlacenih.getSelectedValue();
        if (student == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali sudenta za pregled racuna");
            return;
        }
        if(listaStudentaSPlacenim.isEmpty()){
            JOptionPane.showMessageDialog(getRootPane(), "Nema studenata koji su platili račun za " + odabraniMjesec);
            return;
        }
        if(pMjeseca == null || kMjeseca == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali mjesec za pregled računa");
            return;
        }
        Racun r = new Racun();
        List<Racun> listaRacuna = HibernateUtil.getSession().createQuery(
                "FROM Racun a WHERE a.obrisano=false and student like :uvjet and a.datumIzdavanjaRacuna BETWEEN :stDate AND :edDate ")
                .setString("uvjet", "%" + student.getSifra() + "%")
                .setParameter("stDate", pMjeseca)
                .setParameter("edDate", kMjeseca)
                .list();
        for (Racun racun : listaRacuna) {
            r = racun;
        }
        new PojedinostiRacuna(r).setVisible(true);
    }//GEN-LAST:event_btnPojedinostiPlacenihRacunaActionPerformed

    private void cmbStudentskiDomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStudentskiDomActionPerformed
        studentskiDom = (StudentskiDom) cmbStudentskiDom.getSelectedItem();
        if(studentskiDom == null){
            JOptionPane.showMessageDialog(getRootPane(), "Odaberite studentski dom za pregled računa");
            return;
        }
        popuniListeStudenata();
    }//GEN-LAST:event_cmbStudentskiDomActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzdajRacune;
    private javax.swing.JButton btnPojedinostNeplacenihiRacuna;
    private javax.swing.JButton btnPojedinostiPlacenihRacuna;
    private javax.swing.JButton btnUplataIzvrsena;
    private javax.swing.JComboBox<String> cmbMjesec;
    private javax.swing.JComboBox<String> cmbStudentskiDom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<Student> listaBez;
    private javax.swing.JList<Student> listaPlacenih;
    private javax.swing.JList<Student> listaS;
    // End of variables declaration//GEN-END:variables

    public static boolean isDateInBetweenIncludingEndPoints(final Date min, final Date max, final Date date){
        return !(date.before(min) || date.after(max));
    }

    private void odabirDatuma() {
        GregorianCalendar gc = (GregorianCalendar) Calendar.getInstance();
        gc.setTime(new Date());
        gc.set(Calendar.MONTH, cmbMjesec.getSelectedIndex());
        gc.set(Calendar.DAY_OF_MONTH, 1);
        pocetakMjeseca=gc.getTime();
        gc.add(Calendar.MONTH, 1);
        gc.add(Calendar.DAY_OF_MONTH, -1);
        krajMjeseca = gc.getTime();
        String pM = format.format(pocetakMjeseca);
        String kM = format.format(krajMjeseca);
        try {
            pMjeseca = format.parse(pM);
            kMjeseca = format.parse(kM);
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(getRootPane(), "Ne može prebaciti string u Date");
            return;
        }
        odabraniMjesec = (String)cmbMjesec.getSelectedItem();
    }

    private void popuniListeStudenata() {
        DefaultListModel<Student> model1 = new DefaultListModel<>();
        DefaultListModel<Student> model2 = new DefaultListModel<>();
        DefaultListModel<Student> model3 = new DefaultListModel<>();
        listaStudentaSPlacenim = new ArrayList<>();
        List<Racun> listaRacuna = HibernateUtil.getSession().createQuery(
                "FROM Racun a WHERE a.obrisano=false and a.datumIzdavanjaRacuna BETWEEN :stDate AND :edDate ")
                .setParameter("stDate", pMjeseca)
                .setParameter("edDate", kMjeseca)
                .list();
        listaStudentaBezRacuna = HibernateUtil.getSession().createQuery("FROM Student a WHERE a.obrisano=false").list();
        listaStudentaSNeplacenimRacunom = new ArrayList<>();
        List<Racun> listaPlacenihRacuna = HibernateUtil.getSession().createQuery(
                "FROM Racun a WHERE a.obrisano=false AND a.datumIzdavanjaRacuna BETWEEN :stDate AND :edDate "
                        + " AND a.datumUplateRacuna is not null ")
                        .setParameter("stDate", pMjeseca)
                        .setParameter("edDate", kMjeseca)
                        .list();
        for (Racun racun : listaPlacenihRacuna) {
            listaStudentaSPlacenim.add(racun.getStudent());
            model3.addElement(racun.getStudent());
        }
        for (Racun racun : listaRacuna) {
            listaStudentaSNeplacenimRacunom.add(racun.getStudent());
        }
        listaStudentaBezRacuna.removeAll(listaStudentaSNeplacenimRacunom);
        listaStudentaSNeplacenimRacunom.removeAll(listaStudentaSPlacenim);
        for (Student student : listaStudentaSNeplacenimRacunom) {
            if(student.isObrisano()){
                continue;
            }
            model1.addElement(student);
        }
        for (Student student : listaStudentaBezRacuna) {
            model2.addElement(student);
        }
        this.listaS.setModel(model1);
        this.listaBez.setModel(model2);
        this.listaPlacenih.setModel(model3);
    }   
}
