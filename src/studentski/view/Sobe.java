/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentski.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import studentski.controller.Obrada;
import studentski.model.Racun;
import studentski.model.Soba;
import studentski.model.Student;
import studentski.pomocno.HibernateUtil;

/**
 *
 * @author Ivan
 */
public class Sobe extends javax.swing.JFrame {

    private Obrada<Soba> obradaSoba;
    private Obrada<Student> obradaStudent;
    private Integer brojSobe;
    private String paviljon;
    private Soba odabranaSoba;
    private Student odabraniStudent;
    private Student pojedinostiStudenta;
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_RESET = "\u001B[0m";

    /**
     * Creates new form Sobe
     */
    public Sobe() {
        initComponents();
        cmbPaviljon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        cmbBrojSobe.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            }
        });
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        obradaSoba = new Obrada<>();
        obradaStudent = new Obrada<>();
        cmbPaviljon.setSelectedIndex(0);
        cmbBrojSobe.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbBrojSobe = new javax.swing.JComboBox<>();
        cmbPaviljon = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaStudenta = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnPojedinostiStudenta = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnNoviStudent = new javax.swing.JButton();
        btnPromjeniStudenta = new javax.swing.JButton();
        btnObrisiStudenta = new javax.swing.JButton();
        btnNovaSoba = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnObrisiSobu = new javax.swing.JButton();
        btnPromjeniSobu = new javax.swing.JButton();
        btnPojedinostiSobe = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Odaberi sobu:");

        cmbBrojSobe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBrojSobeActionPerformed(evt);
            }
        });

        cmbPaviljon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "crveni", "plavi" }));
        cmbPaviljon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPaviljonActionPerformed(evt);
            }
        });

        jLabel2.setText("2. Odaberi broj sobe:");

        jLabel3.setText("1. Odaberi paviljon:");

        jScrollPane2.setViewportView(listaStudenta);

        jLabel4.setText("Studenti u odabranoj sobi:");

        btnPojedinostiStudenta.setText("Pojedinosti studenta");
        btnPojedinostiStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostiStudentaActionPerformed(evt);
            }
        });

        jLabel5.setText("Rad sa studentima u sobi:");

        btnNoviStudent.setText("Novi");
        btnNoviStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoviStudentActionPerformed(evt);
            }
        });

        btnPromjeniStudenta.setText("Promjeni");
        btnPromjeniStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniStudentaActionPerformed(evt);
            }
        });

        btnObrisiStudenta.setText("Obriši");
        btnObrisiStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStudentaActionPerformed(evt);
            }
        });

        btnNovaSoba.setText("Unesi novu sobu");
        btnNovaSoba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaSobaActionPerformed(evt);
            }
        });

        jLabel7.setText("Rad sa sobama:");

        btnObrisiSobu.setText("Obriši sobu");
        btnObrisiSobu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiSobuActionPerformed(evt);
            }
        });

        btnPromjeniSobu.setText("Promjeni sobu");

        btnPojedinostiSobe.setText("Pojedinosti sobe");
        btnPojedinostiSobe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostiSobeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(btnPojedinostiStudenta, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnNoviStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPromjeniStudenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnObrisiStudenta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbPaviljon, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(24, 24, 24)))
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(119, 119, 119)
                                .addComponent(cmbBrojSobe, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPojedinostiSobe, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNovaSoba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnObrisiSobu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPromjeniSobu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbPaviljon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbBrojSobe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(btnNovaSoba)
                        .addGap(12, 12, 12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnPromjeniSobu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisiSobu))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnPojedinostiSobe)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnPojedinostiStudenta)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNoviStudent)
                        .addGap(18, 18, 18)
                        .addComponent(btnPromjeniStudenta)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisiStudenta)))
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbBrojSobeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBrojSobeActionPerformed
       napuniStudente();
    }//GEN-LAST:event_cmbBrojSobeActionPerformed
    
    public void napuniSobe() {
        paviljon = (String) cmbPaviljon.getSelectedItem();
        DefaultComboBoxModel<Integer> model = new DefaultComboBoxModel<>();
        List<Soba> lista = HibernateUtil.getSession().createQuery(
                " from Soba a where a.obrisano=false and paviljon like :uvjet")
                .setString("uvjet", "%" + paviljon + "%")
                .list();
        for (Soba soba : lista) {
            model.addElement(soba.getBrojSobe());
        }
        cmbBrojSobe.setModel(model);
    }
    
    public void napuniSobeNakonUnosaNove(){
        cmbPaviljon.setSelectedIndex(0);
        paviljon = (String) cmbPaviljon.getSelectedItem();
        DefaultComboBoxModel<Integer> model = new DefaultComboBoxModel<>();
        List<Soba> lista = HibernateUtil.getSession().createQuery(
                " from Soba a where a.obrisano=false and paviljon like :uvjet")
                .setString("uvjet", "%" + paviljon + "%")
                .list();
        for (Soba soba : lista) {
            model.addElement(soba.getBrojSobe());
        }
        cmbBrojSobe.setModel(model);
        
    }
    
    public void napuniStudente(){
        brojSobe = (Integer) cmbBrojSobe.getSelectedItem();
        List<Soba> listaSoba = HibernateUtil.getSession().createQuery(
                " from Soba a where a.obrisano=false and paviljon like :uvjet1 and brojsobe like :uvjet2 ")
                .setString("uvjet1", "%" + paviljon + "%")
                .setString("uvjet2", "%" + brojSobe + "%")
                .list();
        for (Soba soba : listaSoba) {
            odabranaSoba = soba;
        }
        System.out.println(ANSI_BLUE + "Odabrana soba je: " 
                + odabranaSoba.getPaviljon() + " " + odabranaSoba.getBrojSobe()+ ANSI_RESET);
        DefaultListModel<Student> model = new DefaultListModel<>();
        List<Student> lista = HibernateUtil.getSession().createQuery(
                " from Student a where a.obrisano=false and soba like :uvjet ")
                .setString("uvjet", "%" + odabranaSoba.getSifra() + "%")
                .list();
        for (Student student : lista) {
            model.addElement(student);
            System.out.println(ANSI_BLUE + "Ime studenta je: " + student.getSifra()+ ANSI_RESET);
        }
        listaStudenta.setModel(model);
    }

    private void btnPojedinostiStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostiStudentaActionPerformed
        pojedinostiStudenta = new Student();
        pojedinostiStudenta = listaStudenta.getSelectedValue();
        if (pojedinostiStudenta == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite studenta");
            return;
        }
        new PojedinostiStudent(pojedinostiStudenta).setVisible(true);
    }//GEN-LAST:event_btnPojedinostiStudentaActionPerformed

    private void btnNoviStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoviStudentActionPerformed
        if (odabranaSoba == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite sobu");
            return;
        }
        Long count = ((Long) HibernateUtil.getSession().createQuery("select count(*) from Student a "
                + " where a.obrisano=false and soba like :uvjet ")
                .setString("uvjet", "%" + odabranaSoba.getSifra() + "%")
                .uniqueResult());
        Integer brojStudenataUSobi = count.intValue();
        if (brojStudenataUSobi >= odabranaSoba.getBrojKreveta()) {
            JOptionPane.showMessageDialog(getRootPane(), "U sobi se već nalazi dva studenta");
            return;
        }
        System.out.println(ANSI_BLUE + "Odabrana soba je: " 
                + odabranaSoba.getPaviljon() + " " + odabranaSoba.getBrojSobe()+ ANSI_RESET);
        new StudentiNovi(odabranaSoba,this).setVisible(true);
        System.out.println(ANSI_BLUE + "Vratio se poslje setvisible" + ANSI_RESET);
        //popuniListuStudenta();
    }//GEN-LAST:event_btnNoviStudentActionPerformed

    private void btnPromjeniStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniStudentaActionPerformed
        Student st = listaStudenta.getSelectedValue();
        if (st == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Obavezno odaberite studenta!");
            return;
        }
        System.out.println("1111 "+st.getSifra());
        new StudentiPromjena(st, this).setVisible(true);
    }//GEN-LAST:event_btnPromjeniStudentaActionPerformed

    private void cmbPaviljonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPaviljonActionPerformed
        napuniSobe();
    }//GEN-LAST:event_cmbPaviljonActionPerformed

    private void btnObrisiStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStudentaActionPerformed
        odabraniStudent = listaStudenta.getSelectedValue();
        if(odabraniStudent == null){
            JOptionPane.showMessageDialog(getRootPane(), "Odaberite studenta kojeg želite obrisati");
            return;
        }
        for (Racun racun : odabraniStudent.getRacuni()) {
            if(!racun.isPlacen()){
                JOptionPane.showMessageDialog(getRootPane(), "Student ima neplaćenih računa te ga se ne može obrisati");
                return;
            }
        }
        obradaStudent.delete(odabraniStudent);
        napuniStudente();
    }//GEN-LAST:event_btnObrisiStudentaActionPerformed

    private void btnNovaSobaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaSobaActionPerformed
        new SobeNova(this).setVisible(true);
    }//GEN-LAST:event_btnNovaSobaActionPerformed

    private void btnObrisiSobuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiSobuActionPerformed
        Soba soba = odabranaSoba;
        if(soba == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali sobu za brisanje");
            return;
        }
        boolean mozeObrisati=true;
        
        for (Student s : soba.getStudenti()) {
            if(!s.isObrisano()){
                mozeObrisati=false;
                break;
            }    
        }
        if(!mozeObrisati){
            JOptionPane.showMessageDialog(getRootPane(), "Soba se ne može brisati jer se u njoj nalaze studenti!");
            return;
        }
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (getRootPane(), "Želite li obrisati "
                + "sobu: " + soba.getBrojSobe() + " " + soba.getPaviljon() +"?", "Upozorenje", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            obradaSoba.delete(soba);
            JOptionPane.showMessageDialog(getRootPane(), "Izbrisali ste sobu: "
            + soba.getBrojSobe() + " " + soba.getPaviljon());
        }else{
            return;
        }
        napuniSobe();
    }//GEN-LAST:event_btnObrisiSobuActionPerformed

    private void btnPojedinostiSobeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostiSobeActionPerformed
        if(odabranaSoba == null){
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite sobu");
            return;
        }
        new PojedinostiSobe(odabranaSoba).setVisible(true);
    }//GEN-LAST:event_btnPojedinostiSobeActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovaSoba;
    private javax.swing.JButton btnNoviStudent;
    private javax.swing.JButton btnObrisiSobu;
    private javax.swing.JButton btnObrisiStudenta;
    private javax.swing.JButton btnPojedinostiSobe;
    private javax.swing.JButton btnPojedinostiStudenta;
    private javax.swing.JButton btnPromjeniSobu;
    private javax.swing.JButton btnPromjeniStudenta;
    private javax.swing.JComboBox<Integer> cmbBrojSobe;
    private javax.swing.JComboBox<String> cmbPaviljon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Student> listaStudenta;
    // End of variables declaration//GEN-END:variables

    private void popuniListuStudenta() {
        brojSobe = (Integer) cmbBrojSobe.getSelectedItem();
        System.out.println(ANSI_BLUE + "Paviljon je: " + paviljon + ANSI_RESET);
        System.out.println(ANSI_BLUE + "Broj sobe je: " + brojSobe + ANSI_RESET);
        List<Soba> listaSoba = HibernateUtil.getSession().createQuery(
                " from Soba a where a.obrisano=false and paviljon like :uvjet1 and brojsobe like :uvjet2 ")
                .setString("uvjet1", "%" + paviljon + "%")
                .setString("uvjet2", "%" + brojSobe + "%")
                .list();
        for (Soba soba : listaSoba) {
            odabranaSoba = soba;
        }
        DefaultListModel<Student> model = new DefaultListModel<>();
        List<Student> lista = HibernateUtil.getSession().createQuery(
                " from Student a where a.obrisano=false and soba like :uvjet ")
                .setString("uvjet", "%" + odabranaSoba.getSifra() + "%")
                .list();
        for (Student student : lista) {
            model.addElement(student);
            System.out.println(ANSI_BLUE + "Ime studenta je: " + student.getIme() + ANSI_RESET);
        }
        listaStudenta.setModel(model);
    }

}
