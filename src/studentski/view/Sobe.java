/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentski.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import studentski.controller.Obrada;
import studentski.controller.ObradaPaviljon;
import studentski.controller.ObradaSoba;
import studentski.controller.ObradaStudent;
import studentski.controller.ObradaStudentskiDom;
import studentski.controller.StucException;
import studentski.model.Racun;
import studentski.model.Paviljon;
import studentski.model.Soba;
import studentski.model.Student;
import studentski.model.StudentskiDom;
import studentski.pomocno.HibernateUtil;

/**
 *
 * @author Ivan
 */
public class Sobe extends javax.swing.JFrame {

    private ObradaSoba obradaSoba;
    private ObradaPaviljon obradaPaviljon;
    private ObradaStudent obradaStudent;
    private ObradaStudentskiDom obradaStudentskiDom;
    private Obrada<Soba> obrada;
    private Paviljon paviljon;
    private StudentskiDom studentskiDom;
    private Soba odabranaSoba;
    private Student odabraniStudent;
    private Student pojedinostiStudenta;

    /**
     * Creates new form Sobe
     */
    public Sobe() {
        initComponents();
        cmbPaviljon.addActionListener((ActionEvent e) -> {
        });
        cmbSoba.addActionListener((ActionEvent e) -> {
        });
        cmbStudentskiDom.addActionListener((ActionEvent e) -> {
        });
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        instanciranjeObrada();
        napuniDomove();     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbSoba = new javax.swing.JComboBox<>();
        cmbPaviljon = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaStudenta = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        btnPojedinostiStudenta = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnNoviStudent = new javax.swing.JButton();
        btnPromjeniStudenta = new javax.swing.JButton();
        btnObrisiStudenta = new javax.swing.JButton();
        btnNovaSoba = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnObrisiSobu = new javax.swing.JButton();
        btnPojedinostiSobe = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbStudentskiDom = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Odaberi paviljon:");

        cmbSoba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSobaActionPerformed(evt);
            }
        });

        cmbPaviljon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPaviljonActionPerformed(evt);
            }
        });

        jLabel2.setText("Odaberi broj sobe:");

        jScrollPane2.setViewportView(listaStudenta);

        jLabel4.setText("Studenti u odabranoj sobi:");

        btnPojedinostiStudenta.setText("Pojedinosti studenta");
        btnPojedinostiStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostiStudentaActionPerformed(evt);
            }
        });

        jLabel5.setText("Rad sa studentima u sobi:");

        btnNoviStudent.setText("Novi");
        btnNoviStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNoviStudentActionPerformed(evt);
            }
        });

        btnPromjeniStudenta.setText("Promjeni");
        btnPromjeniStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPromjeniStudentaActionPerformed(evt);
            }
        });

        btnObrisiStudenta.setText("Odjavi");
        btnObrisiStudenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiStudentaActionPerformed(evt);
            }
        });

        btnNovaSoba.setText("Unesi novu sobu");
        btnNovaSoba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaSobaActionPerformed(evt);
            }
        });

        jLabel7.setText("Rad sa sobama:");

        btnObrisiSobu.setText("Obri≈°i sobu");
        btnObrisiSobu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiSobuActionPerformed(evt);
            }
        });

        btnPojedinostiSobe.setText("Pojedinosti sobe");
        btnPojedinostiSobe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPojedinostiSobeActionPerformed(evt);
            }
        });

        jLabel6.setText("Odaberi studentski dom:");

        cmbStudentskiDom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStudentskiDomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnPojedinostiSobe, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(156, 156, 156)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cmbSoba, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbPaviljon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(4, 4, 4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPojedinostiStudenta, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(161, 161, 161))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbStudentskiDom, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNovaSoba)
                                .addGap(18, 18, 18)
                                .addComponent(btnObrisiSobu, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(113, 113, 113)
                                .addComponent(btnNoviStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPromjeniStudenta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnObrisiStudenta, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(47, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbStudentskiDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbPaviljon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cmbSoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPojedinostiSobe)
                    .addComponent(btnPojedinostiStudenta))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNoviStudent)
                    .addComponent(btnPromjeniStudenta)
                    .addComponent(btnObrisiStudenta)
                    .addComponent(btnObrisiSobu)
                    .addComponent(btnNovaSoba))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSobaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSobaActionPerformed
        odabranaSoba = (Soba) cmbSoba.getSelectedItem();
        napuniStudente();
    }//GEN-LAST:event_cmbSobaActionPerformed

    public void napuniStudente(){
        //Dohvati studente Iz odabrane sobe
        List<Student> listaStudenata = obradaStudent.dohvatiSveStudenteIzOdabraneSobe(odabranaSoba);
        DefaultListModel<Student> dlmStudent = new DefaultListModel<>();
        listaStudenata.forEach(x -> {
            dlmStudent.addElement(x);
        });
        listaStudenta.setModel(dlmStudent);
    }

    private void btnPojedinostiStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostiStudentaActionPerformed
        pojedinostiStudenta = new Student();
        pojedinostiStudenta = listaStudenta.getSelectedValue();
        if (pojedinostiStudenta == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite studenta");
            return;
        }
        new PojedinostiStudent(pojedinostiStudenta).setVisible(true);
    }//GEN-LAST:event_btnPojedinostiStudentaActionPerformed

    private void btnNoviStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNoviStudentActionPerformed
        if (odabranaSoba == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite sobu");
            return;
        }
        Long count = ((Long) HibernateUtil.getSession().createQuery("select count(*) from Student a "
                + " where a.obrisano=false and soba like :uvjet ")
                .setString("uvjet", "%" + odabranaSoba.getSifra() + "%")
                .uniqueResult());
        Integer brojStudenataUSobi = count.intValue();
        if (brojStudenataUSobi >= odabranaSoba.getBrojKreveta()) {
            JOptionPane.showMessageDialog(getRootPane(), "U sobi se veƒá nalazi dva studenta");
            return;
        }
        new StudentiNovi(odabranaSoba,this).setVisible(true);
        //popuniListuStudenta();
    }//GEN-LAST:event_btnNoviStudentActionPerformed

    private void btnPromjeniStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPromjeniStudentaActionPerformed
        Student st = listaStudenta.getSelectedValue();
        if (st == null) {
            JOptionPane.showMessageDialog(getRootPane(), "Obavezno odaberite studenta!");
            return;
        }
        System.out.println("1111 "+st.getSifra());
        new StudentiPromjena(st, this).setVisible(true);
    }//GEN-LAST:event_btnPromjeniStudentaActionPerformed

    private void cmbPaviljonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPaviljonActionPerformed
        napuniSobe();
    }//GEN-LAST:event_cmbPaviljonActionPerformed

    private void btnObrisiStudentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiStudentaActionPerformed
        odabraniStudent = listaStudenta.getSelectedValue();
        if(odabraniStudent == null){
            JOptionPane.showMessageDialog(getRootPane(), "Odaberite studenta kojeg ≈æelite obrisati");
            return;
        }
        for (Racun racun : odabraniStudent.getRacuni()) {
            if(!racun.isPlacen()){
                JOptionPane.showMessageDialog(getRootPane(), "Student ima neplaƒáenih raƒçuna te se ne mo≈æe odjaviti iz doma");
                return;
            }
        }
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (getRootPane(), "≈Ωelite li odjaviti "
                + "studenta: " + odabraniStudent +"?", "Upozorenje", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            try {
                obradaStudent.obrisi(odabraniStudent);
                JOptionPane.showMessageDialog(getRootPane(), "Odjavili ste studenta "
                        + odabraniStudent);
            } catch (StucException ex) {
                Logger.getLogger(Sobe.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            return;
        }
        napuniStudente();
    }//GEN-LAST:event_btnObrisiStudentaActionPerformed

    private void btnNovaSobaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaSobaActionPerformed
        new SobeNova(paviljon, this).setVisible(true);
    }//GEN-LAST:event_btnNovaSobaActionPerformed

    private void btnObrisiSobuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiSobuActionPerformed
        Soba soba = odabranaSoba;
        if(soba == null){
            JOptionPane.showMessageDialog(getRootPane(), "Niste odabrali sobu za brisanje");
            return;
        }
        boolean mozeObrisati = provjeraStudetaUSobi(soba);
        if(!mozeObrisati){
            JOptionPane.showMessageDialog(getRootPane(), "Soba se ne mo≈æe brisati jer se u njoj nalaze studenti!");
            return;
        }
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (getRootPane(), "≈Ωelite li obrisati "
                + "sobu: " + soba.getBrojSobe() + " " + soba.getPaviljon() +"?", "Upozorenje", dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            obrada.delete(soba);
            JOptionPane.showMessageDialog(getRootPane(), "Izbrisali ste sobu: "
            + soba.getBrojSobe() + " " + soba.getPaviljon());
        }else{
            return;
        }
        napuniSobe();
    }//GEN-LAST:event_btnObrisiSobuActionPerformed

    private void btnPojedinostiSobeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPojedinostiSobeActionPerformed
        if(odabranaSoba == null){
            JOptionPane.showMessageDialog(getRootPane(), "Prvo odaberite sobu");
            return;
        }
        new PojedinostiSobe(odabranaSoba).setVisible(true);
    }//GEN-LAST:event_btnPojedinostiSobeActionPerformed

    private void cmbStudentskiDomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStudentskiDomActionPerformed
        napuniPaviljone();
    }//GEN-LAST:event_cmbStudentskiDomActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNovaSoba;
    private javax.swing.JButton btnNoviStudent;
    private javax.swing.JButton btnObrisiSobu;
    private javax.swing.JButton btnObrisiStudenta;
    private javax.swing.JButton btnPojedinostiSobe;
    private javax.swing.JButton btnPojedinostiStudenta;
    private javax.swing.JButton btnPromjeniStudenta;
    private javax.swing.JComboBox<Paviljon> cmbPaviljon;
    private javax.swing.JComboBox<Soba> cmbSoba;
    private javax.swing.JComboBox<StudentskiDom> cmbStudentskiDom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Student> listaStudenta;
    // End of variables declaration//GEN-END:variables

    private void instanciranjeObrada() {
        obrada = new Obrada<>();
        obradaSoba = new ObradaSoba();
        obradaStudent = new ObradaStudent();
        obradaPaviljon = new ObradaPaviljon();
        obradaStudentskiDom = new ObradaStudentskiDom();
    }

    public void napuniDomove() {
        DefaultComboBoxModel<StudentskiDom> dcbmStudentskiDom = new DefaultComboBoxModel<>();
        List<StudentskiDom> listaDomova = obradaStudentskiDom.dohvatiSveDomove();
        listaDomova.forEach(x -> {
            dcbmStudentskiDom.addElement(x);
        });
        cmbStudentskiDom.setModel(dcbmStudentskiDom);
        if(listaDomova.size()>0){
            cmbStudentskiDom.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(getRootPane(), "Ne postoje studentski domovi, unesite ih!");
            new StudentskiDomovi().setVisible(true);
            dispose();
        } 
    }
    
    public void napuniPaviljone(){
        studentskiDom = (StudentskiDom) cmbStudentskiDom.getSelectedItem();
        DefaultComboBoxModel<Paviljon> dcmbPaviljon = new DefaultComboBoxModel<>();
        List<Paviljon> listaPaviljona = obradaPaviljon.dohvatiSvePaviljoneUOdabranomDomu(studentskiDom);
        listaPaviljona.forEach(x -> {
            dcmbPaviljon.addElement(x);
        });
        cmbPaviljon.setModel(dcmbPaviljon);
        if(listaPaviljona.size()>0){
            cmbPaviljon.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(getRootPane(), "Nema paviljona, unesi novi");
            new Paviljoni(studentskiDom).setVisible(true);
            dispose();
        }
    }
    
    public void napuniSobe(){
        paviljon = (Paviljon) cmbPaviljon.getSelectedItem();
        DefaultComboBoxModel<Soba> dcbmSoba = new DefaultComboBoxModel<>();
        List<Soba> listaSoba = obradaSoba.dohvatiSveSobeZaOdabraniPaviljon(paviljon);
        listaSoba.forEach(x -> {
            dcbmSoba.addElement(x);
        });
        cmbSoba.setModel(dcbmSoba);
        if(listaSoba.size()>0){
            cmbSoba.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(getRootPane(), "Nema soba u paviljonu, unesi nove");
        }
    }

    private boolean provjeraStudetaUSobi(Soba soba) {
        boolean mozeObrisati = true;
        for (Student s : soba.getStudenti()) {
            if(!s.isObrisano()){
                mozeObrisati=false;
                break;
            }    
        }
        return mozeObrisati;
    }
}
