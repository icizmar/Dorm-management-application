/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentski.view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import studentski.controller.Obrada;
import studentski.controller.ObradaPaviljon;
import studentski.controller.ObradaSoba;
import studentski.controller.ObradaStudent;
import studentski.controller.ObradaStudentskiDom;
import studentski.model.Paviljon;
import studentski.model.Soba;
import studentski.model.Student;
import studentski.model.StudentskiDom;

/**
 *
 * @author Ivan
 */
public class UpisivanjeStudenataUSobe extends javax.swing.JFrame {

    private ObradaStudentskiDom obradaStudentskiDom;
    private ObradaPaviljon obradaPaviljon;
    private ObradaSoba obradaSoba;
    private ObradaStudent obradaStudent;
    private Obrada<Soba> obrada;
    private StudentskiDom studentskiDom;
    private Paviljon paviljon;
    private Soba soba;
    private Student student;
    
    /**
     * Creates new form UpisivanjeStudenataUSobe
     */
    public UpisivanjeStudenataUSobe() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        cmbStudentskiDom.addActionListener((ActionEvent e) -> {
        });
        cmbPaviljon.addActionListener((ActionEvent e) -> {
        });
        obradaStudentskiDom = new ObradaStudentskiDom();
        obradaPaviljon = new ObradaPaviljon();
        obradaSoba = new ObradaSoba();
        obradaStudent = new ObradaStudent();
        obrada = new Obrada<>();
        napuniDomove();
        napuniStudente();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listStudent = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        cmbStudentskiDom = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbPaviljon = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSoba = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(listStudent);

        jLabel1.setText("Odaberi studentski dom: ");

        cmbStudentskiDom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStudentskiDomActionPerformed(evt);
            }
        });

        jLabel2.setText("Odaberi paviljon:");

        cmbPaviljon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPaviljonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(listSoba);

        jButton1.setText("Useli");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbStudentskiDom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbPaviljon, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbStudentskiDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbPaviljon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(114, 114, 114))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        soba = listSoba.getSelectedValue();
        student = listStudent.getSelectedValue();
        if(soba == null){
            JOptionPane.showMessageDialog(getRootPane(), "Odaberite sobu u koju želite smjestit odabranog studenta!");
            return;
        }
        if(student == null){
            JOptionPane.showMessageDialog(getRootPane(), "Odaberite studenta!");
            return;
        }
        soba.getStudenti().add(student);
        student.setSoba(soba);
        try {
            obrada.save(soba);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(getRootPane(), "Nije moguće upisati studenta u sobu!");
        }
        napuniSobe();
        napuniStudente();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbStudentskiDomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStudentskiDomActionPerformed
        napuniPaviljone();
    }//GEN-LAST:event_cmbStudentskiDomActionPerformed

    private void cmbPaviljonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPaviljonActionPerformed
        napuniSobe();
    }//GEN-LAST:event_cmbPaviljonActionPerformed

    public void napuniDomove() {
        DefaultComboBoxModel<StudentskiDom> dcbmStudentskiDom = new DefaultComboBoxModel<>();
        List<StudentskiDom> listaDomova = obradaStudentskiDom.dohvatiSveDomove();
        listaDomova.forEach(x -> {
            dcbmStudentskiDom.addElement(x);
        });
        cmbStudentskiDom.setModel(dcbmStudentskiDom);
        if(listaDomova.size()>0){
            cmbStudentskiDom.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(getRootPane(), "Ne postoje studentski domovi, unesite ih!");
        } 
    }
    
    public void napuniPaviljone(){
        studentskiDom = (StudentskiDom) cmbStudentskiDom.getSelectedItem();
        DefaultComboBoxModel<Paviljon> dcmbPaviljon = new DefaultComboBoxModel<>();
        List<Paviljon> listaPaviljona = obradaPaviljon.dohvatiSvePaviljoneUOdabranomDomu(studentskiDom);
        listaPaviljona.forEach(x -> {
            dcmbPaviljon.addElement(x);
        });
        cmbPaviljon.setModel(dcmbPaviljon);
        if(listaPaviljona.size()>0){
            cmbPaviljon.setSelectedIndex(0);
        }else{
            JOptionPane.showMessageDialog(getRootPane(), "Nema paviljona, unesi novi");
        }
    }
    
    public void napuniSobe(){
        paviljon = (Paviljon) cmbPaviljon.getSelectedItem();
        DefaultComboBoxModel<Soba> dcbmSoba = new DefaultComboBoxModel<>();
        List<Soba> listaSoba = obradaSoba.dohvatiSveSobeZaOdabraniPaviljon(paviljon);
        //List<Soba> listaSobaUKojimaImaMjesta = new ArrayList<>();
        //listaSoba
        listaSoba.forEach(x -> {
            if(x.getStudenti().size() < x.getBrojKreveta()){
                dcbmSoba.addElement(x);
            }
        });
        listSoba.setModel(dcbmSoba);
    }
    
    public void napuniStudente(){
        List<Student> listaStudenat = obradaStudent.dohvatiStudenteKojiNisuUSobi();
        DefaultListModel<Student> dlmStudent = new DefaultListModel<>();
        listaStudenat.forEach(x -> {
            dlmStudent.addElement(x);
        });
        listStudent.setModel(dlmStudent);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Paviljon> cmbPaviljon;
    private javax.swing.JComboBox<StudentskiDom> cmbStudentskiDom;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Soba> listSoba;
    private javax.swing.JList<Student> listStudent;
    // End of variables declaration//GEN-END:variables

}
